name: CI


on:
  
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  
  workflow_dispatch:


jobs:
  
  build:

    runs-on: ubuntu-latest 

    
    steps:
      
      - uses: actions/checkout@v4

     
      - name: build image 
        run: | 
              docker build -t ${{secrets.REG_USER}}/portfolio:${{github.run_number}} .
              docker build  -t ${{secrets.REG_USER}}/portfolio  .

      - name: Image scan 
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{secrets.REG_USER}}/portfolio:${{github.run_number}}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL'

      - name: push image 
        run: | 
            docker login -u ${{secrets.REG_USER}} -p ${{secrets.REG_PASS}}
        
            docker push ${{secrets.REG_USER}}/portfolio:${{github.run_number}}  
            docker push ${{secrets.REG_USER}}/portfolio    
            
  
  deploy: 
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: SSH to Server 
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          #port: ${{ secrets.PORT }}
          envs: IMAGE_URI,AWS_REGION,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY
          script: |
            # Login to ECR
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com
            
            # Pull new image
            echo "Pulling image: $IMAGE_URI"
            docker pull $IMAGE_URI
            
            # Stop existing container
            docker rm -f resume || echo "No existing container to remove"
            
            # Start new container
            echo "Starting new container..."
            docker run -d --name resume -p 8080:5001 --restart unless-stopped $IMAGE_URI
            
            # Verify deployment
            sleep 10
            if docker ps | grep -q resume; then
              echo "✅ Deployment successful!"
            else
              echo "❌ Deployment failed!"
              exit 1
            fi
            
            # Clean up old images
            docker image prune -f